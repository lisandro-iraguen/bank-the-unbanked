@using Radzen;



<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">

    @if (walletConectorState.Value.IsConnecting)
    {
        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else
    {

        <RadzenCard>

            <div style="text-align:center">
                <img class="wallet-icon" src="@walletState.Value.Wallet.Icon" title="@walletState.Value.Wallet.Name" style="width: 65px; height: 65px;" />
            </div>
            <div style="text-align:center">
                <span class="wallet-name">@walletState.Value.Wallet.Name Wallet</span>
            </div>

            @if (@walletState.Value.Wallet.UsedAdress is not null && @walletState.Value.Wallet.UsedAdress.Any())
            {
                <div style="text-align:center">
                    <span class="wallet-address">@walletState.Value.Wallet.UsedAdress[0].Substring(0, 10) ...</span>
                </div>
            }
            <div>
                @if (walletState.Value.Wallet.Connected)
                {
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-m-1">
                        <RadzenButton Click="@(async () => await DisconnectWalletAsync())">Disconnect</RadzenButton>
                    </RadzenStack>
                }

            </div>

        </RadzenCard>

    } 

</RadzenStack>
