@inherits Fluxor.Blazor.Web.Components.FluxorComponent;
@page "/home"
@using Client.State.Crypto
@using Radzen;

@if (walletConectingState.Value.IsConnecting)
{
    <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </RadzenStack>
 
}
else
{
    @if (walletState.Value.Wallet is null)
    {

        <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
            <RadzenAlert AlertStyle="AlertStyle.Danger" AllowClose="false" Variant="Variant.Flat" Shade="Shade.Lighter">
                no hay wallet selecionada, hay que conectarse
            </RadzenAlert>
        </RadzenStack>
    }
}



@if (walletState.Value.Wallet is not null)
{
   
    <RadzenStack Orientation="Orientation.Vertical" Gap="1px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
        <RadzenIcon Icon="account_balance"></RadzenIcon>
    </RadzenStack>


    <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
        <h4>Balance: @walletState.Value.Wallet.CoinCurrency @walletState.Value.Wallet.BalanceAda </h4>
        <p>@walletState.Value.Wallet.Network </p>
        @if (cryptoState.Value.IsLoading)
        {
            <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
                <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            </RadzenStack>
        }
        else
        {
            <h1>$ARS @(cryptoState.Value.Crypto.TotalBid * @walletState.Value.Wallet.Balance) </h1>
            <h4>BinanceP2P</h4>
            <h4>Dolar: @cryptoState.Value.Crypto.TotalBid </h4>
            <h4>ultima actualizacion: @cryptoState.Value.Crypto.DTTime.ToString("HH:mm:ss") </h4>
        }


    </RadzenStack>

    @*  <RadzenCard>

            <RadzenStack Orientation="Orientation.Vertical" Gap="10px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">From:</RadzenText>
                <RadzenTextBox Change=@(args => OnChangeWalletAdress(args, "WalletAdress")) @bind-Value=@walletfromTransfer class="w-100" aria-label="Default TextBox" />
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">to:</RadzenText>
                <RadzenTextBox Change=@(args => OnChangeWalletAdress(args, "WalletAdress")) @bind-Value=@walletToTransfer class="w-100" aria-label="Default TextBox" />

                <RadzenNumeric @bind-Value=@valueToTransfer InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />

                <RadzenButton Click=@(args => singTransaction()) Text="enviar" ButtonStyle="ButtonStyle.Primary" Disabled="isSendingTransaction" />



            </RadzenStack>
            @if (isSendingTransaction)
            {

                <RadzenStack Gap="3px" Class="rz-m-12">
                    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                </RadzenStack>
            }
        </RadzenCard>  *@


}






