@page "/home"
@using Client.State.Crypto
@using Radzen;
@using Fluxor

@inject IDispatcher dispatcher;
@inject IState<CryptoState> cryptoState;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent;


@if (walletState is null)
{

    <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
        <RadzenAlert AlertStyle="AlertStyle.Danger" AllowClose="false" Variant="Variant.Flat" Shade="Shade.Lighter">
            no hay wallet selecionada, hay que conectarse
        </RadzenAlert>
        
    </RadzenStack>
}





@if (walletState is not null)
{
    <RadzenStack Orientation="Orientation.Vertical" Gap="1px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
        <RadzenIcon Icon="account_balance"></RadzenIcon>
    </RadzenStack>
    @if (@isConecting)
    {
        <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </RadzenStack>
    }
    else

    {
        <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
            <h4>Balance: @symbol @balanceAda </h4>
            <p>@networkType </p>            
            @if (cryptoState.Value.IsLoading)
            {
                <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                </RadzenStack>
            }
            else
            {
                <h1>$ARS @(balancePesos) </h1>
                <h4>BinanceP2P</h4>
                <h4>Dolar: @cryptoState.Value.Crypto.TotalBid </h4>
                <h4>ultima actualizacion: @cryptoState.Value.Crypto.DTTime.ToString("HH:mm:ss") </h4>
            }
           
          
        </RadzenStack>

        <RadzenCard>

            <RadzenStack Orientation="Orientation.Vertical" Gap="10px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">From:</RadzenText>
                <RadzenTextBox Change=@(args => OnChangeWalletAdress(args, "WalletAdress")) @bind-Value=@walletfromTransfer class="w-100" aria-label="Default TextBox" />
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">to:</RadzenText>
                <RadzenTextBox Change=@(args => OnChangeWalletAdress(args, "WalletAdress")) @bind-Value=@walletToTransfer class="w-100" aria-label="Default TextBox" />

                <RadzenNumeric @bind-Value=@valueToTransfer InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />

                <RadzenButton Click=@(args => singTransaction()) Text="enviar" ButtonStyle="ButtonStyle.Primary" Disabled="isSendingTransaction" />



            </RadzenStack>
            @if (isSendingTransaction)
            {

                <RadzenStack Gap="3px" Class="rz-m-12">
                    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                </RadzenStack>
            }
        </RadzenCard>

    }
}

 




