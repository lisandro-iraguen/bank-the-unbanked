@inherits Fluxor.Blazor.Web.Components.FluxorComponent;
@page "/home"
@using Client.State.Crypto;
@using Radzen;






@if (walletConecting.Value.IsConnecting)
{
    <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </RadzenStack>

}
else
{
    @if (walletState.Value.Wallet is null)
    {

        <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
            <RadzenAlert AlertStyle="AlertStyle.Danger" AllowClose="false" Variant="Variant.Flat" Shade="Shade.Lighter">
                no hay wallet selecionada, hay que conectarse
            </RadzenAlert>
        </RadzenStack>
    }
}



@if (walletState.Value.Wallet is not null)
{

    <RadzenStack Orientation="Orientation.Vertical" Gap="1px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
        <RadzenIcon Icon="account_balance"></RadzenIcon>
    </RadzenStack>


    <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
        @if (cryptoState.Value.IsLoading)
        {
            <RadzenStack Orientation="Orientation.Vertical" Gap="3px" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
                <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            </RadzenStack>
        }
        else
        {
            <h1>$ARS @(cryptoState.Value.Crypto.TotalBid * walletState.Value.Wallet.BalanceAda2) </h1>
            <h4>BinanceP2P</h4>
            <h4>1 ada : @cryptoState.Value.Crypto.TotalBid Dolares</h4>
        }


    </RadzenStack>

    <RadzenCard>

        <RadzenStack Orientation="Orientation.Vertical" Gap="10px" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">

            <RadzenFormField Text="Wallet A Enviar" Variant="Variant.Flat" class="w-100">
                <RadzenTextBox Change=@(args => OnChangeWalletAdress(args, "WalletAdress")) @bind-Value=@walletToTransfer />
            </RadzenFormField>




            <RadzenFormField Text="$ARS" Variant="Variant.Flat">
                <RadzenNumeric TValue="ulong" @bind-Value=@valueToTransfer Change=@(args => OnChangeValueToBeTransfer(args, "Numeric")) Disabled="transactionFeeState.Value.IsLoading" />
            </RadzenFormField>

            @if (transactionFeeState.Value.IsLoading)
            {
                <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" />
                <h4>loading fees... </h4>
            }
            else
            {
                <h4>Network Fee $ARS: @(cryptoState.Value.Crypto.TotalBid * transactionFeeState.Value.Fee) </h4>
            }

            <RadzenButton Click=@(args => SignAndSubmitTransaction()) Text="enviar" ButtonStyle="ButtonStyle.Primary" Disabled="CantSendStransaction()" />

        </RadzenStack>
        @if (transactionState.Value.IsSigningTransaction)
        {
            <RadzenStack Gap="3px" Class="rz-m-12">
                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            </RadzenStack>

        }

    </RadzenCard>


}
